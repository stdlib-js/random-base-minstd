"use strict";var b=function(t,e){return function(){return e||t((e={exports:{}}).exports,e),e.exports}};var w=b(function(ue,x){"use strict";var J=require("@stdlib/constants-int32-max"),V=require("@stdlib/math-base-special-floor"),G=J-1;function k(){var t=V(1+G*Math.random());return t|0}x.exports=k});var O=b(function(oe,F){"use strict";var E=require("@stdlib/utils-define-nonenumerable-read-only-property"),v=require("@stdlib/utils-define-nonenumerable-read-only-accessor"),B=require("@stdlib/utils-define-nonenumerable-read-write-accessor"),A=require("@stdlib/assert-has-own-property"),H=require("@stdlib/assert-is-plain-object"),U=require("@stdlib/assert-is-boolean").isPrimitive,W=require("@stdlib/assert-is-collection"),Z=require("@stdlib/assert-is-positive-integer").isPrimitive,Y=require("@stdlib/assert-is-int32array"),o=require("@stdlib/string-format"),y=require("@stdlib/constants-int32-max"),s=require("@stdlib/array-int32"),c=require("@stdlib/blas-base-gcopy"),K=require("@stdlib/array-to-json"),X=w(),N=y-1|0,Q=y-1|0,$=16807,T=1,p=2,g=2,u=4,d=5;function C(t,e){var n;return e?n="option":n="argument",t.length<d+1?new RangeError(o("invalid %s. State array has insufficient length.",n)):t[0]!==T?new RangeError(o("invalid %s. State array has an incompatible schema version. Expected: `%s`. Actual: `%s`.",n,T,t[0])):t[1]!==p?new RangeError(o("invalid %s. State array has an incompatible number of sections. Expected: `%s`. Actual: `%s`.",n,p,t[1])):t[g]!==1?new RangeError(o("invalid %s. State array has an incompatible state length. Expected: `%u`. Actual: `%u`.",n,1,t[g])):t[u]!==t.length-d?new RangeError(o("invalid %s. State array length is incompatible with seed section length. Expected: `%u`. Actual: `%u`.",n,t.length-d,t[u])):null}function ee(t){var e,n,l,i,h,S;if(l={},arguments.length){if(!H(t))throw new TypeError(o("invalid argument. Options argument must be an object. Value: `%s`.",t));if(A(t,"copy")&&(l.copy=t.copy,!U(t.copy)))throw new TypeError(o("invalid option. `%s` option must be a boolean. Option: `%s`.","copy",t.copy));if(A(t,"state")){if(n=t.state,l.state=!0,!Y(n))throw new TypeError(o("invalid option. `%s` option must be an Int32Array. Option: `%s`.","state",n));if(S=C(n,!0),S)throw S;l.copy===!1?e=n:(e=new s(n.length),c(n.length,n,1,e,1)),n=new s(e.buffer,e.byteOffset+(g+1)*e.BYTES_PER_ELEMENT,1),i=new s(e.buffer,e.byteOffset+(u+1)*e.BYTES_PER_ELEMENT,n[u])}if(i===void 0)if(A(t,"seed"))if(i=t.seed,l.seed=!0,Z(i)){if(i>Q)throw new RangeError(o("invalid option. `%s` option must be a positive integer less than the maximum signed 32-bit integer. Option: `%u`.","seed",i));i|=0}else if(W(i)&&i.length>0)h=i.length,e=new s(d+h),e[0]=T,e[1]=p,e[g]=1,e[u]=h,c.ndarray(h,i,1,0,e,1,u+1),n=new s(e.buffer,e.byteOffset+(g+1)*e.BYTES_PER_ELEMENT,1),i=new s(e.buffer,e.byteOffset+(u+1)*e.BYTES_PER_ELEMENT,h),n[0]=i[0];else throw new TypeError(o("invalid option. `%s` option must be either a positive integer less than the maximum signed 32-bit integer or an array-like object containing integer values less than the maximum signed 32-bit integer. Option: `%s`.","seed",i));else i=X()|0}else i=X()|0;return n===void 0&&(e=new s(d+1),e[0]=T,e[1]=p,e[g]=1,e[u]=1,e[u+1]=i,n=new s(e.buffer,e.byteOffset+(g+1)*e.BYTES_PER_ELEMENT,1),i=new s(e.buffer,e.byteOffset+(u+1)*e.BYTES_PER_ELEMENT,1),n[0]=i[0]),E(a,"NAME","minstd"),v(a,"seed",_),v(a,"seedLength",M),B(a,"state",L,I),v(a,"stateLength",R),v(a,"byteLength",q),E(a,"toJSON",P),E(a,"MIN",1),E(a,"MAX",y-1),E(a,"normalized",f),E(f,"NAME",a.NAME),v(f,"seed",_),v(f,"seedLength",M),B(f,"state",L,I),v(f,"stateLength",R),v(f,"byteLength",q),E(f,"toJSON",P),E(f,"MIN",(a.MIN-1)/N),E(f,"MAX",(a.MAX-1)/N),a;function _(){var r=e[u];return c(r,i,1,new s(r),1)}function M(){return e[u]}function R(){return e.length}function q(){return e.byteLength}function L(){var r=e.length;return c(r,e,1,new s(r),1)}function I(r){var m;if(!Y(r))throw new TypeError(o("invalid argument. Must provide an Int32Array. Value: `%s`.",r));if(m=C(r,!1),m)throw m;l.copy===!1?l.state&&r.length===e.length?c(r.length,r,1,e,1):(e=r,l.state=!0):(r.length!==e.length&&(e=new s(r.length)),c(r.length,r,1,e,1)),n=new s(e.buffer,e.byteOffset+(g+1)*e.BYTES_PER_ELEMENT,1),i=new s(e.buffer,e.byteOffset+(u+1)*e.BYTES_PER_ELEMENT,e[u])}function P(){var r={};return r.type="PRNG",r.name=a.NAME,r.state=K(e),r.params=[],r}function a(){var r=n[0]|0;return r=$*r%y|0,n[0]=r,r|0}function f(){return(a()-1)/N}}F.exports=ee});var z=b(function(fe,j){"use strict";var re=O(),te=w(),ne=re({seed:te()});j.exports=ne});var ie=require("@stdlib/utils-define-nonenumerable-read-only-property"),D=z(),ae=O();ie(D,"factory",ae);module.exports=D;
/**
* @license Apache-2.0
*
* Copyright (c) 2018 The Stdlib Authors.
*
* Licensed under the Apache License, Version 2.0 (the "License");
* you may not use this file except in compliance with the License.
* You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing, software
* distributed under the License is distributed on an "AS IS" BASIS,
* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
* See the License for the specific language governing permissions and
* limitations under the License.
*/
//# sourceMappingURL=index.js.map
